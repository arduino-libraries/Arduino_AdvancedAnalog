// This example outputs a sine wave on A12/DAC0.

#include "AdvancedDAC.h"
uint16_t lut[] = {
    0x0800,0x0832,0x0864,0x0896,0x08c8,0x08fa,0x092c,0x095e,0x098f,0x09c0,0x09f1,0x0a22,0x0a52,0x0a82,0x0ab1,0x0ae0,
    0x0b0f,0x0b3d,0x0b6b,0x0b98,0x0bc5,0x0bf1,0x0c1c,0x0c47,0x0c71,0x0c9a,0x0cc3,0x0ceb,0x0d12,0x0d39,0x0d5f,0x0d83,
    0x0da7,0x0dca,0x0ded,0x0e0e,0x0e2e,0x0e4e,0x0e6c,0x0e8a,0x0ea6,0x0ec1,0x0edc,0x0ef5,0x0f0d,0x0f24,0x0f3a,0x0f4f,
    0x0f63,0x0f76,0x0f87,0x0f98,0x0fa7,0x0fb5,0x0fc2,0x0fcd,0x0fd8,0x0fe1,0x0fe9,0x0ff0,0x0ff5,0x0ff9,0x0ffd,0x0ffe,
    0x0fff,0x0ffe,0x0ffd,0x0ff9,0x0ff5,0x0ff0,0x0fe9,0x0fe1,0x0fd8,0x0fcd,0x0fc2,0x0fb5,0x0fa7,0x0f98,0x0f87,0x0f76,
    0x0f63,0x0f4f,0x0f3a,0x0f24,0x0f0d,0x0ef5,0x0edc,0x0ec1,0x0ea6,0x0e8a,0x0e6c,0x0e4e,0x0e2e,0x0e0e,0x0ded,0x0dca,
    0x0da7,0x0d83,0x0d5f,0x0d39,0x0d12,0x0ceb,0x0cc3,0x0c9a,0x0c71,0x0c47,0x0c1c,0x0bf1,0x0bc5,0x0b98,0x0b6b,0x0b3d,
    0x0b0f,0x0ae0,0x0ab1,0x0a82,0x0a52,0x0a22,0x09f1,0x09c0,0x098f,0x095e,0x092c,0x08fa,0x08c8,0x0896,0x0864,0x0832,
    0x0800,0x07cd,0x079b,0x0769,0x0737,0x0705,0x06d3,0x06a1,0x0670,0x063f,0x060e,0x05dd,0x05ad,0x057d,0x054e,0x051f,
    0x04f0,0x04c2,0x0494,0x0467,0x043a,0x040e,0x03e3,0x03b8,0x038e,0x0365,0x033c,0x0314,0x02ed,0x02c6,0x02a0,0x027c,
    0x0258,0x0235,0x0212,0x01f1,0x01d1,0x01b1,0x0193,0x0175,0x0159,0x013e,0x0123,0x010a,0x00f2,0x00db,0x00c5,0x00b0,
    0x009c,0x0089,0x0078,0x0067,0x0058,0x004a,0x003d,0x0032,0x0027,0x001e,0x0016,0x000f,0x000a,0x0006,0x0002,0x0001,
    0x0000,0x0001,0x0002,0x0006,0x000a,0x000f,0x0016,0x001e,0x0027,0x0032,0x003d,0x004a,0x0058,0x0067,0x0078,0x0089,
    0x009c,0x00b0,0x00c5,0x00db,0x00f2,0x010a,0x0123,0x013e,0x0159,0x0175,0x0193,0x01b1,0x01d1,0x01f1,0x0212,0x0235,
    0x0258,0x027c,0x02a0,0x02c6,0x02ed,0x0314,0x033c,0x0365,0x038e,0x03b8,0x03e3,0x040e,0x043a,0x0467,0x0494,0x04c2,
    0x04f0,0x051f,0x054e,0x057d,0x05ad,0x05dd,0x060e,0x063f,0x0670,0x06a1,0x06d3,0x0705,0x0737,0x0769,0x079b,0x07cd
};

AdvancedDAC dac_1(A12);
static size_t lut_offs = 0;
static size_t lut_size = sizeof(lut) / sizeof(lut[0]);

void setup() {
    Serial.begin(9600);

    while (!Serial) {

    }

    if (!dac_1.begin(DAC_RESOLUTION_12, 8000, 64, 16)) {
        Serial.println("Failed to start DAC1 !");
        while (1);
    }
}

void dac_output_sq(AdvancedDAC &dac_out) {
    if (dac_out.available()) {
        // Get a free buffer for writing.
        SampleBuffer buf = dac_out.dequeue();

        // Write data to buffer.
        for (size_t i=0; i<buf.size(); i++, lut_offs++) {
            buf[i] =  lut[lut_offs % lut_size];
        }

        // Writethe buffer to DAC.
        dac_out.write(buf);
    }
}

void loop() {
    dac_output_sq(dac_1);
}
